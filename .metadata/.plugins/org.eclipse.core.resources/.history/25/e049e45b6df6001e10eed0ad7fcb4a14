package core;

import hla.rti1516_202X.AttributeHandle;
import hla.rti1516_202X.AttributeHandleSet;
import hla.rti1516_202X.AttributeHandleValueMap;
import hla.rti1516_202X.InteractionClassHandle;
import hla.rti1516_202X.ObjectClassHandle;
import hla.rti1516_202X.ObjectInstanceHandle;
import hla.rti1516_202X.ParameterHandle;
import hla.rti1516_202X.ParameterHandleValueMap;
import hla.rti1516_202X.RTIambassador;
import hla.rti1516_202X.ResignAction;
import hla.rti1516_202X.encoding.EncoderFactory;
import hla.rti1516_202X.encoding.HLAunicodeString;
import hla.rti1516_202X.exceptions.FederateOwnsAttributes;
import hla.rti1516_202X.exceptions.FederateServiceInvocationsAreBeingReportedViaMOM;
import hla.rti1516_202X.exceptions.FederatesCurrentlyJoined;
import hla.rti1516_202X.exceptions.InvalidResignAction;
import hla.rti1516_202X.exceptions.OwnershipAcquisitionPending;
import hla.rti1516_202X.exceptions.RTIexception;
import hla.rti1516e.exceptions.AttributeNotDefined;
import hla.rti1516e.exceptions.AttributeNotOwned;
import hla.rti1516e.exceptions.CallNotAllowedFromWithinCallback;
import hla.rti1516e.exceptions.ConnectionFailed;
import hla.rti1516e.exceptions.CouldNotCreateLogicalTimeFactory;
import hla.rti1516e.exceptions.CouldNotOpenFDD;
import hla.rti1516e.exceptions.ErrorReadingFDD;
import hla.rti1516e.exceptions.FederateNotExecutionMember;
import hla.rti1516e.exceptions.FederationExecutionDoesNotExist;
import hla.rti1516e.exceptions.IllegalName;
import hla.rti1516e.exceptions.InconsistentFDD;
import hla.rti1516e.exceptions.InteractionClassNotDefined;
import hla.rti1516e.exceptions.InteractionClassNotPublished;
import hla.rti1516e.exceptions.InteractionParameterNotDefined;
import hla.rti1516e.exceptions.InvalidInteractionClassHandle;
import hla.rti1516e.exceptions.InvalidLocalSettingsDesignator;
import hla.rti1516e.exceptions.InvalidObjectClassHandle;
import hla.rti1516e.exceptions.NameNotFound;
import hla.rti1516e.exceptions.NotConnected;
import hla.rti1516e.exceptions.ObjectClassNotDefined;
import hla.rti1516e.exceptions.ObjectClassNotPublished;
import hla.rti1516e.exceptions.ObjectInstanceNameInUse;
import hla.rti1516e.exceptions.ObjectInstanceNameNotReserved;
import hla.rti1516e.exceptions.ObjectInstanceNotKnown;
import hla.rti1516e.exceptions.RTIinternalError;
import hla.rti1516e.exceptions.RestoreInProgress;
import hla.rti1516e.exceptions.SaveInProgress;
import hla.rti1516e.exceptions.SynchronizationPointLabelNotAnnounced;
import hla.rti1516e.exceptions.UnsupportedCallbackModel;

import java.io.BufferedReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.TimeZone;

import model.CommHub;
import model.Position;
import siso.smackdown.frame.FrameType;
import skf.config.Configuration;
import skf.core.SEEAbstractFederate;
import skf.core.SEEAbstractFederateAmbassador;
import skf.exception.PublishException;
import skf.exception.SubscribeException;
import skf.exception.UnsubscribeException;
import skf.exception.UpdateException;
import skf.model.interaction.modeTransitionRequest.ModeTransitionRequest;
import skf.model.object.annotations.ObjectClass;
import skf.model.object.executionConfiguration.ExecutionConfiguration;
import skf.model.object.executionConfiguration.ExecutionMode;
import skf.synchronizationPoint.SynchronizationPoint;
import skf.utility.JulianDateType;

public class CommHubFederate extends SEEAbstractFederate implements Observer {

	private static final int MAX_WAIT_TIME = 10000;
	
	
	private CommHub commHub = null;
	private String local_settings_designator = null;
	
	private ModeTransitionRequest mtr = null;
	
	private SimpleDateFormat format = null;
	
	public String federateName = "CommHub";
	private final List<String> _args;
	private final BufferedReader _systemInput;
	private RTIambassador _rtiAmbassador;
	private InteractionClassHandle _communicationClassHandle;
	private ParameterHandle _messageParameterHandle;
	private ParameterHandle _senderParameterHandle;
	private ObjectInstanceHandle _userInstanceHandle;
	private AttributeHandle _nameAttributeHandle;
	private String _username;
	private volatile boolean _reservationComplete;
	private volatile boolean _reservationSucceeded;
	private final Object _reservationSemaphore = new Object();
	private EncoderFactory _encoderFactory;
	private final Map<ObjectInstanceHandle, Participant> _knownObjects = new HashMap();

	
	public CommHubFederate(SEEAbstractFederateAmbassador seefedamb, CommHub commHub) {
		super(seefedamb);
		this.commHub  = commHub;
		this.mtr = new ModeTransitionRequest();
		
		this.format =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
		this._args = null;
		this._systemInput = null;
		format.setTimeZone(TimeZone.getTimeZone("UTC"));
	}

	@SuppressWarnings("unchecked")
	public void configureAndStart(Configuration config) throws ConnectionFailed, InvalidLocalSettingsDesignator, UnsupportedCallbackModel, 
														CallNotAllowedFromWithinCallback, RTIinternalError, CouldNotCreateLogicalTimeFactory, 
														FederationExecutionDoesNotExist, InconsistentFDD, ErrorReadingFDD, CouldNotOpenFDD, 
														SaveInProgress, RestoreInProgress, NotConnected, MalformedURLException, 
														FederateNotExecutionMember, NameNotFound, InvalidObjectClassHandle, AttributeNotDefined, 
														ObjectClassNotDefined, InstantiationException, IllegalAccessException, IllegalName, 
														ObjectInstanceNameInUse, ObjectInstanceNameNotReserved, ObjectClassNotPublished, 
														AttributeNotOwned, ObjectInstanceNotKnown, PublishException, UpdateException, 
														SubscribeException, InvalidInteractionClassHandle, InteractionClassNotDefined, 
														InteractionClassNotPublished, InteractionParameterNotDefined, UnsubscribeException, 
														InterruptedException, SynchronizationPointLabelNotAnnounced {
		// 1. configure the SKF framework
		super.configure(config);

		// 2. Connect on RTI
		/*
		 *For MAK local_settings_designator = "";
		 *For PITCH local_settings_designator = "crcHost=" + <crc_host> + "\ncrcPort=" + <crc_port>;
		 */
		local_settings_designator = "crcHost="+config.getCrcHost()+"\ncrcPort="+config.getCrcPort();
		super.connectToRTI(local_settings_designator);

		// 3. join the SEE Federation execution
		super.joinFederationExecution();
		
		// 4. Subscribe the Subject
		super.subscribeSubject(this);
		
		/*
		 * 5. Check if the federate is a Late Joiner Federate. 
		 * All the Federates of the SEE Teams must be Late Joiner.
		 */
		if(!SynchronizationPoint.INITIALIZATION_STARTED.isAnnounced()){
			
			// 6. Wait for the announcement of the Synch-Point "initialization_completed"
			super.waitingForAnnouncement(SynchronizationPoint.INITIALIZATION_COMPLETED, MAX_WAIT_TIME);

			/* 7. Wait for announcement of "objects_discovered", and Federation
			 * Specific Mutiphase Initialization Synch-Points
			 */
			// -> skipped
			
			/* 8. Subscribe Execution Control Object Class Attributes
			 * and wait for ExCO Discovery
			 */
			super.subscribeElement((Class<? extends ObjectClass>) ExecutionConfiguration.class);
			super.waitForElementDiscovery((Class<? extends ObjectClass>) ExecutionConfiguration.class, MAX_WAIT_TIME);
			
			// 9. Request ExCO update
			while(super.getExecutionConfiguration() == null){
				super.requestAttributeValueUpdate((Class<? extends ObjectClass>) ExecutionConfiguration.class);
				Thread.sleep(10);
			}
				
			// 10. Publish MTR Interaction
			super.publishInteraction(this.mtr);
			
			/* 11. Publish and Subscribe Object Class Attributes
			 * and Interaction Class Parameters
			 * 
			 * 12. Reserve All Federate Object Instance Names
			 * 
			 * 13. Wait for All Federate Object Instance Name Reservation
			 * Success/Failure Callbacks
			 * 
			 * 14. Register Federate Object Instances
			 */
			super.publishElement(commHub, "CommHub");
			super.subscribeReferenceFrame(FrameType.AitkenBasinLocalFixed);
			
			// 15. Wait for All Required Objects to be Discovered
			// -> Skipped
			
			/* 16. Setup HLA Time Management and Query GALT, Compute HLTB and 
			 * Time Advance to HLTB
			 */
			super.setupHLATimeManagement();
			
			// 17. Achieve "objects_discovered" Sync-Point and wait for synchronization
			// -> Skipped
		}
		else
			throw new RuntimeException("The federate " + config.getFederateName() + "is not a Late Joiner Federate");
		
		//18. Start simulation execution
		super.startExecution();
		
	}

	@Override
	protected void doAction() throws IllegalName {
		
		/* Time information related to the Federation */
		System.out.println("getFederationTime "+ this.getTime().getFederationTimeCycle());
		System.out.println(format.format(this.getTime().getFederationTimeAsCalendar().getTime()));
		
		try {
			this._communicationClassHandle = this._rtiAmbassador.getInteractionClassHandle("Communication");
		} catch (hla.rti1516_202X.exceptions.NameNotFound e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			this._messageParameterHandle = this._rtiAmbassador.getParameterHandle(this._communicationClassHandle, "Message");
		} catch (hla.rti1516_202X.exceptions.NameNotFound e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.InvalidInteractionClassHandle e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			this._senderParameterHandle = this._rtiAmbassador.getParameterHandle(this._communicationClassHandle, "Sender");
		} catch (hla.rti1516_202X.exceptions.NameNotFound e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.InvalidInteractionClassHandle e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			this._rtiAmbassador.subscribeInteractionClass(this._communicationClassHandle);
		} catch (FederateServiceInvocationsAreBeingReportedViaMOM e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.InteractionClassNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.SaveInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RestoreInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		try {
			this._rtiAmbassador.publishInteractionClass(this._communicationClassHandle);
		} catch (hla.rti1516_202X.exceptions.InteractionClassNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.SaveInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RestoreInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		ObjectClassHandle var6;
		try {
			var6 = this._rtiAmbassador.getObjectClassHandle("Participant");
		} catch (hla.rti1516_202X.exceptions.NameNotFound e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			this._nameAttributeHandle = this._rtiAmbassador.getAttributeHandle(var6, "Name");
		} catch (hla.rti1516_202X.exceptions.NameNotFound e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.InvalidObjectClassHandle e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		AttributeHandleSet var7;
		try {
			var7 = this._rtiAmbassador.getAttributeHandleSetFactory().create();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		var7.add(this._nameAttributeHandle);
		try {
			this._rtiAmbassador.subscribeObjectClassAttributes(var6, var7);
		} catch (hla.rti1516_202X.exceptions.AttributeNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.ObjectClassNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.SaveInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RestoreInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			this._rtiAmbassador.publishObjectClassAttributes(var6, var7);
		} catch (hla.rti1516_202X.exceptions.AttributeNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.ObjectClassNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.SaveInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RestoreInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		do {
			this._username = this.federateName;
			try {
				this._reservationComplete = false;
				this._rtiAmbassador.reserveObjectInstanceName(this._username);
				synchronized (this._reservationSemaphore) {
					while (!this._reservationComplete) {
						try {
							this._reservationSemaphore.wait();
						} catch (InterruptedException var14) {
						}
					}
				}

				if (!this._reservationSucceeded) {
					System.out.println("Federate already taken, try again.");
				}
			} catch (RTIexception var22) {
				System.err.println("RTI exception when reserving name: " + var22.getMessage());
				return;
			}
		} while (!this._reservationSucceeded);

		try {
			this._userInstanceHandle = this._rtiAmbassador.registerObjectInstance(var6, this._username);
		} catch (hla.rti1516_202X.exceptions.ObjectInstanceNameInUse e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.ObjectInstanceNameNotReserved e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.ObjectClassNotPublished e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.ObjectClassNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.SaveInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RestoreInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		AttributeHandleValueMap var8;
		try {
			var8 = this._rtiAmbassador.getAttributeHandleValueMapFactory().create(1);
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		HLAunicodeString var9 = this._encoderFactory.createHLAunicodeString(this._username);
		var8.put(this._nameAttributeHandle, var9.toByteArray());
		try {
			this._rtiAmbassador.updateAttributeValues(this._userInstanceHandle, var8, (byte[]) null);
		} catch (hla.rti1516_202X.exceptions.AttributeNotOwned e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.AttributeNotDefined e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.ObjectInstanceNotKnown e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.SaveInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RestoreInProgress e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.NotConnected e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("Type messages you want to send. To exit, type . <ENTER>");

		while (true) {
			System.out.print("> ");
			String var10;
			try {
				var10 = this._systemInput.readLine();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (var10.equals(".")) {
				try {
					this._rtiAmbassador.resignFederationExecution(ResignAction.DELETE_OBJECTS_THEN_DIVEST);
				} catch (InvalidResignAction e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (OwnershipAcquisitionPending e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (FederateOwnsAttributes e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (hla.rti1516_202X.exceptions.NotConnected e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (hla.rti1516_202X.exceptions.CallNotAllowedFromWithinCallback e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}

			ParameterHandleValueMap var11;
			try {
				var11 = this._rtiAmbassador.getParameterHandleValueMapFactory().create(1);
			} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.NotConnected e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			HLAunicodeString var12 = this._encoderFactory.createHLAunicodeString();
			var12.setValue(var10);
			var11.put(this._messageParameterHandle, var12.toByteArray());
			var11.put(this._senderParameterHandle, var9.toByteArray());
			try {
				this._rtiAmbassador.sendInteraction(this._communicationClassHandle, var11, (byte[]) null);
			} catch (hla.rti1516_202X.exceptions.InteractionClassNotPublished e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.InteractionParameterNotDefined e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.InteractionClassNotDefined e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.SaveInProgress e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.RestoreInProgress e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.FederateNotExecutionMember e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.NotConnected e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (hla.rti1516_202X.exceptions.RTIinternalError e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	

//		
//		Position curr_pos = this.commHub.getPosition();
//		curr_pos.setX(curr_pos.getX()); // update the x coordinate
//
//		try {
//
//			super.updateElement(this.commHub);
//			System.out.println(curr_pos);
//
//		} catch (FederateNotExecutionMember | NotConnected | AttributeNotOwned
//				| AttributeNotDefined | ObjectInstanceNotKnown | SaveInProgress
//				| RestoreInProgress | RTIinternalError | IllegalName
//				| ObjectInstanceNameInUse | ObjectInstanceNameNotReserved
//				| ObjectClassNotPublished | ObjectClassNotDefined
//				| UpdateException e) {
//			e.printStackTrace();
//		}
//

	@Override
	public void update(Observable arg0, Object arg1) {

		System.out.println("The CommHub has received an update");
		if(arg1 instanceof ExecutionConfiguration){
			super.setExecutionConfiguration((ExecutionConfiguration) arg1);
			
			/* Manage state transitions */
			if(super.getExecutionConfiguration().getCurrent_execution_mode() == ExecutionMode.EXEC_MODE_RUNNING &&
					super.getExecutionConfiguration().getNext_execution_mode() == ExecutionMode.EXEC_MODE_FREEZE){
				super.freezeExecution();
			}
			
			else if(super.getExecutionConfiguration().getCurrent_execution_mode() == ExecutionMode.EXEC_MODE_FREEZE &&
					super.getExecutionConfiguration().getNext_execution_mode() == ExecutionMode.EXEC_MODE_RUNNING){
				super.resumeExecution();
			}
			
			else if((super.getExecutionConfiguration().getCurrent_execution_mode() == ExecutionMode.EXEC_MODE_FREEZE || 
					super.getExecutionConfiguration().getCurrent_execution_mode() == ExecutionMode.EXEC_MODE_RUNNING ) &&
					super.getExecutionConfiguration().getNext_execution_mode() == ExecutionMode.EXEC_MODE_SHUTDOWN ){
				super.shudownExecution();
			}
			else
				System.out.println("ExecutionConfiguration status unknown");
			/* End Manage state transitions */
		}
		else
			System.out.println("Type not known!");

	}

}
